from random import random  # –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–∫–∞–∑–∞–ª–∞ —á—Ç–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è "—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞" –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
print('=== –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ –§—É–Ω–∫—Ü–∏–∏ ===\n')

print('=== –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1 ===')
# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
# –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
# –§—É–Ω–∫—Ü–∏—è 1 ‚Äì –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞ —á–∏—Å–µ–ª –≤—Å–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞—Ü–µ–ª–æ –Ω–∞ 3
# –§—É–Ω–∫—Ü–∏—è 2 ‚Äì –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞ —á–∏—Å–µ–ª –≤—Å–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞—Ü–µ–ª–æ –Ω–∞ 4
# –§—É–Ω–∫—Ü–∏—è 3 ‚Äì –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞ —á–∏—Å–µ–ª –≤—Å–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞—Ü–µ–ª–æ –Ω–∞ 5

def func1(int1, int2, int3):            #–î–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π —Ä–µ–∞–ª–∏–∑—É–µ–º –≤—Å–µ 3 —Ä–µ—à–µ–Ω–∏—è
    for num in range(int1, int2+1):     #–¥–æ–±–∞–≤–∏–ª–∏ +1 —á—Ç–æ–±—ã —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤—Ö–æ–¥–∏–ª–æ –≤ –≥—Ä–∞–Ω–∏—Ü—É
        if num % int3 == 0:
            lst.append(num)
    print('–°–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ –æ—Ç', int1, '–¥–æ', int2, '–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞—Ü–µ–ª–æ –Ω–∞', int3, ':',lst)

lst = []
a = int(input('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –æ—Ç—Ä–µ–∑–∫–∞: '))
b = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—Ü  –æ—Ç—Ä–µ–∑–∫–∞: '))
for i in range(3, 6):   # –í—ã–ø–æ–ª–Ω–∏–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∞—Ç–Ω—ã–º
    func1(a, b, i)
    lst = []            # –æ—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

print('\n=== –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2 ===')
# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
# –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –Ω–µ —Å—á–∏—Ç–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π, —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞.
# –≠—Ç–æ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ test(). –í –Ω–µ–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤–≤–æ–¥ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ï—Å–ª–∏ –æ–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ,
# —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è positive(), —Ç–µ–ª–æ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—É –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–ª–æ–≤–∞ "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ".
# –ï—Å–ª–∏ —á–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è negative(),
# –µ–µ —Ç–µ–ª–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–ª–æ–≤–∞ "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ".

def positive():
    print('–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ')
def negative():
    print('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ')
def test():
    if int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: "))>=0:
        positive()
    else:
        negative()
test()

print('\n=== –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3 ===')
# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
# –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ùë•>1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –ø—Ä–æ—Å—Ç—ã–º.
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ YES, –µ—Å–ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç–æ–µ –∏ NO, –µ—Å–ª–∏ —á–∏—Å–ª–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–µ

def simple(int1):
    k=0
    for num in range(2, int1 // 2 + 1):
        if (int1 % num == 0):
            k = k + 1
    if (k <= 0):
        print("YES")
    else:
        print("NO")
a = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: "))
simple(a)

print('\n=== –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4 ===')
# # –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
# # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ –≤ —Å–ø–∏—Å–∫–µ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —à–∞–≥–æ–≤.
# # –°–¥–≤–∏–≥ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–ª—å—Ü–µ–≤—ã–º, —Ç–æ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç, –≤—ã—à–µ–¥—à–∏–π –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞,
# # –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–ª—è—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–≥–æ –µ–≥–æ –∫–æ–Ω—Ü–∞.
def circle_shift(lst, step):
    if step >= 0:
        for i in range(step):
            lst.insert(0, lst.pop())
    else:
        step = abs(step)
        for i in range(step):
            lst.append(lst.pop(0))
lst = [1, 2, 3, 4, 5, 6, 7, 8 ,9, 10]
print('Before: ',lst)
st = int(input('–í–≤–µ–¥–∏—Ç–µ —à–∞–≥ —Å–¥–≤–∏–≥–∞: '))
circle_shift(lst, st)
print('After:  ',lst)

print('\n=== –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5 ===')
# –î–∞–Ω—ã –¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ ùë• –∏ ùë¶. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Ç–æ—á–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (ùë•,ùë¶) –∑–∞—à—Ç—Ä–∏—Ö–æ–≤–∞–Ω–Ω–æ–º—É
# –∫–≤–∞–¥—Ä–∞—Ç—É (–≤–∫–ª—é—á–∞—è –µ–≥–æ –≥—Ä–∞–Ω–∏—Ü—É). –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–≤–∞–¥—Ä–∞—Ç—É, –≤—ã–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ YES, –∏–Ω–∞—á–µ –≤—ã–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ NO.
# –ù–∞ —Ä–∏—Å—É–Ω–∫–µ —Å–µ—Ç–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —Å —à–∞–≥–æ–º 1.

def inSqr(x, y):
    if -1 <=x and x<=1:
        if -1 <= y and y <= 1:
            print("YES")
        else:
            print('NO')
    else:
        print('NO')
x = float(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Ö: '))
y = float(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É y: '))
inSqr(x, y)

print('\n=== –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6 ===')
# –í –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è cylinder(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å —Ü–∏–ª–∏–Ω–¥—Ä–∞.
# –í —Ç–µ–ª–µ cylinder –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è circle, –≤—ã—á–∏—Å–ª—è—é—â–∞—è –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ œÄr2.
# –í —Ç–µ–ª–µ cylinder —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–ª–æ—â–∞–¥—å –±–æ–∫–æ–≤–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞,
# –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ 2œÄrh, –∏–ª–∏ –ø–æ–ª–Ω—É—é –ø–ª–æ—â–∞–¥—å —Ü–∏–ª–∏–Ω–¥—Ä–∞.
# –í –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–ª—É—á–∞–µ –∫ –ø–ª–æ—â–∞–¥–∏ –±–æ–∫–æ–≤–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞ –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —É–¥–≤–æ–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
# —Ñ—É–Ω–∫—Ü–∏–∏ circle().

def cylinder():
    pi = 3.1415
    r = float(input('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏: '))
    h = float(input('–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É —Ü–µ–ª–∏–Ω–¥—Ä–∞: '))
    S_circle = 0
    def circle():
        global S_circle
        S_circle = pi * pow(r, 2)
    print('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å:')
    print('1 - —Ç–æ–ª—å–∫–æ –ø–ª–æ—â–∞–¥—å –±–æ–∫–æ–≤–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏')
    print('2 - –ø–æ–ª–Ω—É—é –ø–ª–æ—â–∞–¥—å —Ü–∏–ª–∏–Ω–¥—Ä–∞')
    ans = int(input('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞: '))
    S_cylinder = 2 * pi * r * h
    if ans == 1:
        print('–ü–ª–æ—â–∞–¥—å –±–æ–∫–æ–≤–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏:',S_cylinder)
    elif ans == 2:
        circle()
        S_full_cyl = S_cylinder + 2*S_circle
        print('–ü–æ–ª–Ω–∞—è –ø–ª–æ—â–∞–¥—å —Ü–∏–ª–∏–Ω–¥—Ä–∞ ',S_full_cyl)
    else:
        print("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–∞–Ω–∞—á–µ–Ω–∏–µ...")
cylinder()

print('\n=== –ó–∞–¥–∞–Ω–∏–µ ‚Ññ7 ===')
# –ó–∞–¥–∞–Ω–∏–µ 7
# –î–∞–Ω —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ü–æ—Å—á–∏—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–º –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ.
# –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –¥–∞–Ω —Å–ø–∏—Å–æ–∫ [1, 1, 3, 2, 1, 3, 4], —Ç–æ –≤ –Ω–µ–º —á–∏—Å–ª–æ 1 –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ç—Ä–∏ —Ä–∞–∑–∞,
# —á–∏—Å–ª–æ 3 - –¥–≤–∞ —Ä–∞–∑–∞, —á–∏—Å–ª–∞ 2 –∏ 4 - –ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑—É.

def fill(list, count):             #filling list function
    for num in range(count):
        list.append(int(random() * 10))
def task7(num):
    print('–ß–∏—Å–ª–æ',num,'–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è',lst.count(num),'—Ä–∞–∑')

lst = []        # defining list
n = 10          # defining list lenght
fill(lst,n)     # filling the list
print('–ò–º–µ–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–ø–∏—Å–æ–∫: ',lst)
for num in set(lst):        #getting cycle to get answer
    task7(num)

print('\n=== –ó–∞–¥–∞–Ω–∏–µ ‚Ññ8 ===')
print('–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥—É–±–ª–∏—Ä—É–µ—Ç –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4')

print('\n=== –ó–∞–¥–∞–Ω–∏–µ ‚Ññ9 ===')
# –ó–∞–¥–∞–Ω–∏–µ 9.
# –î–∞–Ω—ã –¥–≤–∞ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª–∏–Ω—ã. –ù–∞–ø—Ä–∏–º–µ—Ä [5,4,3] –∏ [2,1,3].
# –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ—Ç–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—É—Ç–µ–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–¥—É —Å–ø–∏—Å–∫–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä [5-2, 4-1,3-3]
# –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ [3,3,0]. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏.

def razn(a, b, lenght):
    razn_lst = []
    for num in range(lenght):
        razn_lst.append(a[num]-b[num])
    return razn_lst
n = 3                           #defining list lenght
lst1, lst2 = [], []             #creating lists
fill(lst1, n), fill(lst2, n)    #filling lists
print('–°–ø–∏—Å–æ–∫ ‚Ññ1', lst1,'\n–°–ø–∏—Å–æ–∫ ‚Ññ2', lst2,)
print('3-–π —Å–ø–∏—Å–æ–∫:',razn(lst1, lst2, len(lst1)))